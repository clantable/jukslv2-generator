package delivery

import (
	"context"

	"github.com/clantable/juksl-v2/services/SERVICE_NAME/template/api/delivery/converter"
	"github.com/clantable/juksl-v2/services/SERVICE_NAME/template/api/usecase"
	"github.com/clantable/juksl-v2/services/SERVICE_NAME/template/pb"
)

type TemplateServer struct {
	pb.UnimplementedTemplateServer
	uc usecase.TemplateUsecase
}

func NewTemplateServer(uc usecase.TemplateUsecase) *TemplateServer {
	server := &TemplateServer{
		pb.UnimplementedTemplateServer{},
		uc,
	}
	return server
}

func (cs *TemplateServer) Store(ctx context.Context, in *pb.TemplateParams) (*pb.TemplateParams, error) {
	data := converter.TemplateConverterToRPC(in)
	if err := data.Validate(); err != nil {
		return nil, err
	}
	newData, err := cs.uc.Store(data)
	if err != nil {
		return nil, err
	}
	out := converter.TemplateConverterToDomain(newData)
	return out, nil
}

func (cs *TemplateServer) Fetch(ctx context.Context, in *pb.FetchConfig) (*pb.FetchTemplateResponse, error) {
	query := converter.ConvertFetchQuery(in)
	templates, _, err := cs.uc.Fetch(query)
	if err != nil {
		return nil, err
	}
	res := converter.TemplateConverterOfFetchResultToDomain(templates)
	return res, nil
}

func (cs *TemplateServer) GetByID(ctx context.Context, in *pb.GetByIDParams) (*pb.TemplateParams, error) {
	template, err := cs.uc.GetByID(uint(in.GetId()), in.GetPreload()...)
	if err != nil {
		return nil, err
	}
	out := converter.TemplateConverterToDomain(template)
	return out, nil
}

func (cs *TemplateServer) Update(ctx context.Context, in *pb.UpdateTemplateParams) (*pb.TemplateParams, error) {
	preTemplate := converter.TemplateConverterToRPC(in.Template)
	if err := preTemplate.Validate(); err != nil {
		return nil, err
	}
	updatedTemplate, err := cs.uc.Update(uint(in.GetId()), preTemplate)
	if err != nil {
		return nil, err
	}
	out := converter.TemplateConverterToDomain(updatedTemplate)
	return out, nil
}

func (cs *TemplateServer) SoftDelete(ctx context.Context, in *pb.ID) (*pb.TemplateParams, error) {
	template, err := cs.uc.SoftDelete(uint(in.GetId()))
	if err != nil {
		return nil, err
	}
	out := converter.TemplateConverterToDomain(template)
	return out, nil
}

func (cs *TemplateServer) HardDelete(ctx context.Context, in *pb.ID) (*pb.TemplateParams, error) {
	template, err := cs.uc.HardDelete(uint(in.GetId()))
	if err != nil {
		return nil, err
	}
	out := converter.TemplateConverterToDomain(template)
	return out, nil
}

func (cs *TemplateServer) Restore(ctx context.Context, in *pb.ID) (*pb.TemplateParams, error) {
	template, err := cs.uc.Restore(uint(in.GetId()))
	if err != nil {
		return nil, err
	}
	out := converter.TemplateConverterToDomain(template)
	return out, nil
}
